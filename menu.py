import telebot
import db
import msg
import utils

from telebot import types
from user import User
from saleApplication import SaleApp

import emoji

bot = telebot.AsyncTeleBot("605894746:AAG0WlMjuXoFtKjMOhdhRDkrA-0Ca1uC06I")

# ------ –õ–û–ì–ò  ------
import logging
logger = logging.getLogger('Main')
logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler('actions.log')
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
ch.setFormatter(formatter)
logger.addHandler(ch)
logger.addHandler(file_handler)
# ------ –õ–û–ì–ò  ------

#—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—é
class MainPage():
	def __init__(self, user):
		#–∫–æ–ª—Ö–æ–∑–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		#—Å–æ–æ–±—â–µ–Ω–∏—è —É —Å—Ç—Ä–∞–Ω–∏—Ü—ã(–≤—Ä–µ–º–µ–Ω–Ω–æ)
		self.isExtended = True	
	
		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		self.user = user

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ 
		self.profileButton = msg.personal
		self.infoButton = msg.info
		self.buyButton = msg.buy
		self.sellButton = msg.sell
		self.supportButton = msg.support

		#–ª–∏—Å—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ)
		self.msgList = [self.profileButton, self.infoButton, 
				  self.buyButton, self.sellButton, self.supportButton]

		#—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
		self.markup = types.ReplyKeyboardMarkup(row_width=2)

		#–∑–∞–∫–∏–¥—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		self.markup.row(types.KeyboardButton(self.profileButton))
		self.markup.row(types.KeyboardButton(self.buyButton),
				 types.KeyboardButton(self.sellButton))
		self.markup.row(types.KeyboardButton(self.infoButton))
		self.markup.row(types.KeyboardButton(self.supportButton))
	
	#—á—Ç–æ –∂–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏?????????
	def onPressButton(self):
		button = self.user.message.text
		logger.info('{} - –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {}'.format(self.user.message.chat.id, emoji.demojize(button)))
		if button == self.profileButton:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', callback_data='my_purchases'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí∞ –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏', callback_data='my_sales'))
			markup.add(telebot.types.InlineKeyboardButton(text='ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data='invite_message'))
			markup.add(telebot.types.InlineKeyboardButton(text='üè∑ –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∫—É–ø–æ–Ω–∞', callback_data='enter_coupon_code'))
			bot.send_message(self.user.message.chat.id, 'üíé –ë–∞–ª–∞–Ω—Å: {}\n'
														'üõí –ü–æ–∫—É–ø–æ–∫: {}\n'
														'üí∞ –ü—Ä–æ–¥–∞–∂: {}'.format(self.user.balance, db.get_purchases(self.user.id), db.get_sells(self.user.id)),
														reply_markup=markup)
		elif button == self.buyButton:
			#—Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			self.user.setState('shop')

			if db.get_selling_products():
				text = '–¢–æ–≤–∞—Ä—ã –≤ –ø—Ä–æ–¥–∞–∂–µ:'
				for product in db.get_selling_products():
					text += '\n\nüîπ <b>{}</b>\n–¶–µ–Ω–∞: {} üíé\n–ö—É–ø–∏—Ç—å: /buy_{}'.format(product['title'], product['price'], utils.convertInt(product['id']))
				bot.send_message(self.user.message.chat.id, text, parse_mode='HTML', reply_markup = Page(self.user).getMarkup())
			else:
				bot.send_message(self.user.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. –ü–æ—á–µ–º—É –±—ã –Ω–µ –ø—Ä–æ–¥–∞—Ç—å —á—Ç–æ-—Ç–æ?', reply_markup = Page(self.user).getMarkup())
	
		elif button == self.sellButton:
			if db.check_sale_rules(self.user.id) == 1:
				#—Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
				self.user.setState('sale')

				#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
				bot.reply_to(self.user.message, "–í—ã –∑–∞—à–ª–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –µ—Å–ª–∏ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —á—Ç–æ-–ª–∏–±–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –µ—ë –∏ –í–∞—à —Ç–æ–≤–∞—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–¥–µ-—Ç–æ.", reply_markup = 
				  Page(self.user).getMarkup()).wait()

				bot.send_message(self.user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
			else:
				markup = telebot.types.InlineKeyboardMarkup()
				markup.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', callback_data='sale_confirm_rules'))
				bot.send_message(self.user.id, '–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –í–∞–º –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏:\n\n'
												'- –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —à–∫–æ–ª—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ª—é–±–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–≥ –ª–µ–≥–∫–æ –µ–≥–æ –∑–∞–±—Ä–∞—Ç—å\n'
												'- –°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ä–æ—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n'
												'- –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n'
												'- –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∑–∞–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –Ω–∏–∫–æ–º—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏\n\n'
												'- –í–∞—à —Ç–æ–≤–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', reply_markup=markup)
		elif button == self.infoButton:
			bot.send_message(self.user.id, 
					'{} \n {}'.format(msg.info_text, self.user.balance))
		elif button == self.supportButton:
			self.user.setState('support')
			
			bot.reply_to(self.user.message, "–í—Å–µ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å'", reply_markup = 
			  Page(self.user).getMarkup())

	def handleButtonCallback(self, call):
		logger.info('{} - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ {}'.format(self.user.message.chat.id, call.data))
		if call.data == 'invite_message':
			bot.answer_callback_query(callback_query_id=call.id)
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data='invite_get_link'))
			bot.send_message(self.user.message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –ü—Ä–∏ —ç—Ç–æ–º –∏ –í—ã –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç–µ +25 –∫ –±–∞–ª–∞–Ω—Å—É.',
														reply_markup=markup)
		elif call.data == 'my_purchases':
			bot.answer_callback_query(callback_query_id=call.id)
			if db.get_user_bought_products(self.user.message.chat.id):
				text = '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏:'
				for product in db.get_user_bought_products(self.user.message.chat.id):
					text += '\n\n- {}\n–¶–µ–Ω–∞: {} üíé'.format(product['title'], product['price'])
				bot.send_message(self.user.message.chat.id, text)
			else:
				bot.send_message(self.user.message.chat.id, '–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏. –ü–æ—á–µ–º—É –±—ã –Ω–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?')
		elif call.data == 'my_sales':
			if db.get_user_sale_products(self.user.message.chat.id):
				text = '–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏:'
				for product in db.get_user_sale_products(self.user.message.chat.id):
					text += '\n\n- {}\n–¶–µ–Ω–∞: {} üíé\n–°—Ç–∞—Ç—É—Å: {}'.format(product['title'], product['price'], utils.status[product['status']])
				bot.send_message(self.user.message.chat.id, text)
			else:
				bot.send_message(self.user.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –ø—Ä–æ–¥–∞—Ç—å —á—Ç–æ-—Ç–æ?')
		elif call.data == 'invite_get_link':
			bot.answer_callback_query(callback_query_id=call.id)
			bot.send_message(self.user.message.chat.id, '–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n'
														'–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: https://t.me/fricibot?start='+self.user.ref_code)
		elif call.data == 'sale_confirm_rules':
			db.set_sale_rules(self.user.message.chat.id)
			bot.delete_message(call.message.chat.id, call.message.message_id)
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text='‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —á—Ç–æ-—Ç–æ!').wait()
		elif call.data == 'enter_coupon_code':
			bot.answer_callback_query(callback_query_id=call.id)
			bot.send_message(self.user.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:', reply_markup=types.ForceReply())
	def Think(self):
		logger.info('{} - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥—É–º–∞—Ç—å - {}'.format(self.user.message.chat.id, self.user.message.text))
		if self.user.message.reply_to_message.text == '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:':
			result = db.activate_coupon(self.user.message.chat.id, self.user.message.text)
			text = ''
			if result == None:
				text = '–¢–∞–∫–æ–≥–æ –∫—É–ø–æ–Ω–∞ –Ω–µ—Ç!'
			elif result == False:
				text = '–£–ø—Å, –∫—Ç–æ-—Ç–æ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –∫—É–ø–æ–Ω'
			elif result == True:
				text = '–ö—É–ø–æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
			bot.reply_to(self.user.message, text, reply_markup = Page(self.user).getMarkup())
class ShopPage():
	def __init__(self, user):
		#–∫–æ–ª—Ö–æ–∑–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		#—Å–æ–æ–±—â–µ–Ω–∏—è —É —Å—Ç—Ä–∞–Ω–∏—Ü—ã(–≤—Ä–µ–º–µ–Ω–Ω–æ)
		self.isExtended = False

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		self.user = user

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ 
		#self.beerButton = '–ü–∏–≤–æ'
		#self.vodkaButton = '–í–æ–¥–∫–∞'
		self.backButton = '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

		#–ª–∏—Å—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ)
		self.msgList = [self.backButton]

		#—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
		self.markup = types.ReplyKeyboardMarkup(row_width=2)

		#–∑–∞–∫–∏–¥—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		#self.markup.row(types.KeyboardButton(self.beerButton),
		#		 types.KeyboardButton(self.vodkaButton))
		self.markup.row(types.KeyboardButton(self.backButton))
	
	#—á—Ç–æ –∂–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏?????????
	def onPressButton(self):
		button = self.user.message.text
		logger.info('{} - –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {}'.format(self.user.message.chat.id, emoji.demojize(button)))
		if button == self.backButton:
			#—Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			self.user.setState('main')
			
			#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			bot.reply_to(self.user.message, "–í—ã —É—à–ª–∏ –≤ –º–µ–π–Ω", reply_markup = 
			  Page(self.user).getMarkup())
	def onCommand(self):
		command = self.user.message.text
		logger.info('{} - –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {}'.format(self.user.message.chat.id, command))
		if command.startswith('/buy_'): #–æ—Ç–ª–æ–≤ /buy
			command = command[5:] # —É–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
			product_id = utils.convertInt(command, reverse=True)
			product = db.get_product(product_id)
			if product['status'] == 'sale':
				if self.user.balance >= product['price']:
					markup = telebot.types.InlineKeyboardMarkup()
					markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='buy_cancel'))
					markup.add(telebot.types.InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='buy_confirm_{}'.format(product_id)))
					bot.send_message(self.user.message.chat.id, '–ü–æ–¥–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n\n{}\n–¶–µ–Ω–∞: {} üíé'.format(product['title'], product['price']),
																reply_markup=markup)
				else:
					bot.send_message(self.user.message.chat.id, '‚ö†Ô∏è –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
			else:
				bot.send_message(self.user.message.chat.id, '–£–ø—Å, –∫—Ç–æ-—Ç–æ —É–∂–µ –∫—É–ø–∏–ª —ç—Ç–æ!')
	def handleButtonCallback(self, call):
		logger.info('{} - –º–∞–≥–∞–∑–∏–Ω, –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ {}'.format(self.user.message.chat.id, call.data))
		if call.data == 'buy_cancel':
			bot.answer_callback_query(callback_query_id=call.id)
			bot.edit_message_text('–ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', chat_id=call.message.chat.id, message_id=call.message.message_id)
		elif call.data.startswith('buy_confirm_'):
			bot.answer_callback_query(callback_query_id=call.id)
			product_id = call.data[12:] #—É–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
			product = db.get_product(product_id)
			if product['status'] == 'sale' and product['seller'] != call.message.chat.id:
				if self.user.balance >= product['price']:
					db.buy_product(product_id, call.message.chat.id) # –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ë–î
					db.add_balance(call.message.chat.id, product['price']*-1) # –∑–∞–±—Ä–∞—Ç—å –±–∞–±–∫–∏ –∑–∞ —Ç–æ–≤–∞—Ä
					db.add_balance(product['seller'], product['price']) # –æ—Ç–¥–∞—Ç—å –±–∞–±–∫–∏ –∑–∞ —Ç–æ–≤–∞—Ä
					bot.delete_message(call.message.chat.id, call.message.message_id)
					photos = db.get_sale_app_photos(product_id)
					media_group = []
					for photo in photos:
						media_group.append(types.InputMediaPhoto(photo['photo']))
					bot.send_message(self.user.message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n'
																'–ù–∞–∑–≤–∞–Ω–∏–µ: {}\n'
																'–û–ø–∏—Å–∞–Ω–∏–µ: {}\n'.format(product['title'], product['description'])).wait()
					bot.send_media_group(self.user.message.chat.id, media_group)
				else:
					bot.send_message(self.user.message.chat.id, '‚ö†Ô∏è –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
			elif product['seller'] == call.message.chat.id:
				bot.send_message(self.user.message.chat.id, '–ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä!')
			else:
				bot.send_message(self.user.message.chat.id, '–£–ø—Å, –∫—Ç–æ-—Ç–æ —É–∂–µ –∫—É–ø–∏–ª —ç—Ç–æ!')

class SupportPage():
	def __init__(self, user):
		#–∫–æ–ª—Ö–æ–∑–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		#—Å–æ–æ–±—â–µ–Ω–∏—è —É —Å—Ç—Ä–∞–Ω–∏—Ü—ã(–≤—Ä–µ–º–µ–Ω–Ω–æ)
		self.isExtended = True

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		self.user = user

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ 
		self.completeButton = '–ó–∞–≤–µ—Ä—à–∏—Ç—å'

		#–ª–∏—Å—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ)
		self.msgList = [self.completeButton]

		#—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
		self.markup = types.ReplyKeyboardMarkup(row_width=1)

		#–∑–∞–∫–∏–¥—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		self.markup.row(types.KeyboardButton(self.completeButton))
	

	#—á—Ç–æ –∂–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏?????????
	def onPressButton(self):
		button = self.user.message.text
		logger.info('{} - —Å–∞–ø–ø–æ—Ä—Ç, –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {}'.format(self.user.message.chat.id, emoji.demojize(button)))
		if button == self.completeButton:
			self.user.setState('main') #–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω–∏—Ü—É

			bot.reply_to(self.user.message, "–°–ø–∞—Å–∏–±–æ! –ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º", reply_markup = 
			  Page(self.user).getMarkup())

	def Think(self):
		logger.info('{} - —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–ø–ø–æ—Ä—Ç - {}'.format(self.user.message.chat.id, self.user.message.text))
		db.open_support(self.user.id)
		db.send_to_support(self.user.id, self.user.message.text)

class SalePage():
	def __init__(self, user):
		#–∫–æ–ª—Ö–æ–∑–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		#—Å–æ–æ–±—â–µ–Ω–∏—è —É —Å—Ç—Ä–∞–Ω–∏—Ü—ã(–≤—Ä–µ–º–µ–Ω–Ω–æ)
		self.isExtended = True

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		self.user = user

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –±–¥
		self.saleApp = SaleApp(self.user)

		#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ 
		self.cancel = '–û—Ç–º–µ–Ω–∞'

		#–ª–∏—Å—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ)
		self.msgList = [self.cancel]

		#—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
		self.markup = types.ReplyKeyboardMarkup(row_width=2)

		#–∑–∞–∫–∏–¥—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		self.markup.row(types.KeyboardButton(self.cancel))
		
	#—á—Ç–æ –∂–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏?????????
	def onPressButton(self):
		button = self.user.message.text
		logger.info('{} - –ø—Ä–æ–¥–∞–∂–∞, –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {}'.format(self.user.message.chat.id, emoji.demojize(button)))
		if button == self.cancel:
			#—É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
			self.saleApp.delete()

			#—Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			self.user.setState('main')

			#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			bot.reply_to(self.user.message, "–í—ã —É—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = 
			  Page(self.user).getMarkup())
			pass

	def Think(self):
		if self.saleApp.title == 'None':
			logger.info('{} - –ø—Ä–æ–¥–∞–∂–∞, –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è - {}'.format(self.user.message.chat.id, emoji.demojize(self.user.message.text)))
			self.saleApp.setTitle(self.user.message.text)

			#—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–∞–µ—Ç —é–∑–µ—Ä–∞ –ø—Ä–æ —Ç–æ —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —ç—Ç–æ –µ–ª–∏—Ñ –Ω–∏–∂–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞
			bot.send_message(self.user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∞—à–µ–º—É —Ç–æ–≤–∞—Ä—É")
		elif self.saleApp.description == 'None':
			logger.info('{} - –ø—Ä–æ–¥–∞–∂–∞, –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è - {}'.format(self.user.message.chat.id, emoji.demojize(self.user.message.text)))
			self.saleApp.setDesc(self.user.message.text)
			bot.send_message(self.user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–≤—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)")
		elif not self.saleApp.photos or self.user.message.content_type == 'photo':
			logger.info('{} - –ø—Ä–æ–¥–∞–∂–∞, –ø—Ä–∏–µ–º–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫'.format(self.user.message.chat.id))
			fileID = self.user.message.photo[-1].file_id
			file = bot.get_file(fileID).wait()
			pic = bot.download_file(file.file_path).wait()
			if self.user.message.media_group_id:
				if db.check_photo_media_group(self.user.message.media_group_id):
					self.saleApp.addPhoto(pic, self.user.message.media_group_id)
				else:
					self.saleApp.addPhoto(pic, self.user.message.media_group_id)
					bot.send_message(self.user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
			else:
				self.saleApp.addPhoto(pic, 0)
				bot.send_message(self.user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
		elif not self.saleApp.price:
			logger.info('{} - –ø—Ä–æ–¥–∞–∂–∞, –≤–≤–æ–¥ —Ü–µ–Ω—ã - {}'.format(self.user.message.chat.id, emoji.demojize(self.user.message.text)))
			self.saleApp.setPrice(self.user.message.text)
			
			#—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è"
			self.saleApp.setStatus('checking')

			self.user.setState('main') #–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω–∏—Ü—É

			#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			bot.reply_to(self.user.message, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", reply_markup = 
			  Page(self.user).getMarkup())

		pass

	def _isEmpty():
		pass


class Page():
	#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å—Ç—Ä–∏–Ω–≥–∞ –∏–∑ –î–ë
	def __init__(self, user):
		self.user = user
		self.page_name = user.state

		if self.page_name == 'main':
			self.page = MainPage(user)
		elif self.page_name == 'shop':
			self.page = ShopPage(user)
		elif self.page_name == 'support':
			self.page = SupportPage(user)
		elif self.page_name == 'sale':
			self.page = SalePage(user)

	

	def getMarkup(self):
		return self.page.markup

	def handleMessage(self):
		if self.user.message.content_type == 'photo':
			if self.page_name == 'sale':
				self.page.Think()
		elif self.__isButton(self.user.message):
			self.page.onPressButton()
		elif self.__isCommand(self.user.message):
			self.page.onCommand()
			#–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞,  –º–æ–∂–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏
		elif self.page.isExtended:
			self.page.Think()

	def handleButtonCallback(self, call):
		self.page.handleButtonCallback(call)

			#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
	def __isButton(self, message):
		if any(item in message.text for item in self.page.msgList):
			return True
		else:
			return False

	def __isCommand(self, message):
		if message.text[0] == '/':
			return True
		else:
			return False
